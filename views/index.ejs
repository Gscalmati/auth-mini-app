<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Demo Login & Registro</title>
    <style>
      :root {
        --bg: #0f172a;
        --card: #111827;
        --muted: #94a3b8;
        --text: #e5e7eb;
        --brand: #22c55e;
        --brand-600: #16a34a;
        --danger: #ef4444;
        --ok: #10b981;
        --ring: rgba(34, 197, 94, 0.35);
      }
      * { box-sizing: border-box; }
      body {
        margin: 0;
        background: radial-gradient(1200px 800px at 20% 0%, #111827, #0f172a);
        color: var(--text);
        font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
        min-height: 100vh;
        display: grid;
        place-items: center;
        padding: 24px;
      }
      .container {
        width: 100%;
        max-width: 800px;
        display: grid;
        gap: 20px;
      }
      header { text-align: center; margin-bottom: 8px; }
      header h1 { font-size: 24px; margin: 0 0 6px; }
      header p { margin: 0; color: var(--muted); font-size: 14px; }
      .grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; }
      @media (max-width: 780px) { .grid { grid-template-columns: 1fr; } }
      .card {
        background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.35);
      }
      .card h2 { margin: 0 0 12px; font-size: 18px; }
      .card p { margin: 0 0 16px; color: var(--muted); font-size: 14px; }
      form { display: grid; gap: 12px; }
      .field { display: grid; gap: 6px; }
      label { font-size: 13px; color: var(--text); }
      input {
        background: #0b1220;
        color: var(--text);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 12px;
        padding: 12px 14px;
        outline: none;
        transition: box-shadow .15s ease, border-color .15s ease;
      }
      input:focus { border-color: var(--brand); box-shadow: 0 0 0 4px var(--ring); }
      button {
        border: none;
        border-radius: 12px;
        padding: 12px 14px;
        background: linear-gradient(180deg, var(--brand), var(--brand-600));
        color: white;
        font-weight: 600;
        cursor: pointer;
      }
      button:hover { filter: brightness(1.05); }
      button[disabled] { opacity: .6; cursor: not-allowed; }
      .msg { margin-top: 10px; font-size: 13px; padding: 10px; border-radius: 10px; display: none; }
      .msg.ok { background: rgba(16, 185, 129, .08); color: #a7f3d0; display: block; }
      .msg.err { background: rgba(239, 68, 68, .08); color: #fecaca; display: block; }
    </style>
  </head>
  <body>
    <div class="container">
      <header>
        <h1>Auth Demo</h1>
        <p>Vista simple en EJS con <code>fetch</code> para probar login y registro.</p>
      </header>
      <div class="grid">
        <section class="card">
          <h2>Iniciar sesión</h2>
          <form id="login-form">
            <div class="field">
              <label for="login-username">Usuario</label>
              <input id="login-username" name="username" type="text" placeholder="Tu usuario" required />
            </div>
            <div class="field">
              <label for="login-password">Contraseña</label>
              <input id="login-password" name="password" type="password" placeholder="••••••" required />
            </div>
            <button id="login-submit" type="submit">Entrar</button>
            <div id="login-msg" class="msg"></div>
          </form>
        </section>

        <section class="card">
          <h2>Registrarse</h2>
          <form id="register-form">
            <div class="field">
              <label for="reg-username">Usuario</label>
              <input id="reg-username" name="username" type="text" placeholder="Nuevo usuario" required />
            </div>
            <div class="field">
              <label for="reg-password">Contraseña</label>
              <input id="reg-password" name="password" type="password" placeholder="Mínimo 6 caracteres" minlength="6" required />
            </div>
            <button id="register-submit" type="submit">Crear cuenta</button>
            <div id="register-msg" class="msg"></div>
          </form>
        </section>
      </div>
    </div>

    <script>
      const BASE_URL = 'http://localhost:3000';
      async function postJSON(url, data) {
        const res = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const payload = await res.json().catch(() => ({}));
        if (!res.ok) throw new Error(payload.message || 'Error inesperado');
        return payload;
      }
      function showMsg(el, type, text) {
        el.className = 'msg ' + (type === 'ok' ? 'ok' : 'err');
        el.textContent = text;
      }
      // LOGIN
      document.getElementById('login-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const msg = document.getElementById('login-msg');
        msg.className = 'msg';
        const username = document.getElementById('login-username').value.trim();
        const password = document.getElementById('login-password').value;
        try {
          const data = await postJSON(BASE_URL + '/login', { username, password });
          showMsg(msg, 'ok', data.message || 'Login ok');
        } catch (err) { showMsg(msg, 'err', err.message); }
      });
      // REGISTER
      document.getElementById('register-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const msg = document.getElementById('register-msg');
        msg.className = 'msg';
        const username = document.getElementById('reg-username').value.trim();
        const password = document.getElementById('reg-password').value;
        try {
          const data = await postJSON(BASE_URL + '/register', { username, password });
          showMsg(msg, 'ok', data.message || 'Registro ok');
        } catch (err) { showMsg(msg, 'err', err.message); }
      });
    </script>
  </body>
</html>
